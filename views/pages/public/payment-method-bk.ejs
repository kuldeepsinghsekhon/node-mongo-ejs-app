<style>
/* Uses Bootstrap stylesheets for styling, see linked CSS*/
body {
  background-color: #fff;
  padding: 15px;
}

.toast {
  position: fixed;
  top: 15px;
  right: 15px;
  z-index: 9999;
}

.bootstrap-basic {
  background: white;
}

/* Braintree Hosted Fields styling classes*/
.braintree-hosted-fields-focused {
  color: #495057;
  background-color: #fff;
  border-color: #80bdff;
  outline: 0;
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

.braintree-hosted-fields-focused.is-invalid {
  border-color: #dc3545;
  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
}

</style>
<div class="bootstrap-basic">
   <form class="needs-validation" action="/payments/hosted" method="POST" novalidate="">
      <input type="hidden" name="payment_method_nonce" id="payment_method_nonce">
     <div class="row">
       <div class="col-sm-6 mb-3">
         <label for="cc-name">Name on card</label>
         <input type="text" class="form-control" id="cc-name" placeholder="" required="true">
         <small class="text-muted">Full name as displayed on card</small>
         <div class="invalid-feedback">
           Name on card is required
         </div>
       </div>
       <div class="col-sm-6 mb-3">
         <label for="email">Email</label>
         <input type="email" class="form-control" id="email" placeholder="you@example.com">
         <div class="invalid-feedback">
           Please enter a valid email address for shipping updates.
         </div>
       </div>
     </div>
 
     <div class="row">
       <div class="col-sm-6 mb-3">
         <label for="cc-number">Credit card number</label>
         <div class="form-control" id="cc-number"></div>
         <div class="invalid-feedback">
           Credit card number is required
         </div>
       </div>
       <div class="col-sm-3 mb-3">
         <label for="cc-expiration">Expiration</label>
         <div class="form-control" id="cc-expiration"></div>
         <div class="invalid-feedback">
           Expiration date required
         </div>
       </div>
       <div class="col-sm-3 mb-3">
         <label for="cc-expiration">CVV</label>
         <div class="form-control" id="cc-cvv"></div>
         <div class="invalid-feedback">
           Security code required
         </div>
       </div>
     </div>
 
     <hr class="mb-4">
     <div class="text-center">
     <button id="hosted-submit-button" class="btn btn-primary btn-lg" type="submit">Pay with <span id="card-brand">Card</span></button>
     </div>
   </form>
 </div>
 <div id="paypal-button"></div>
 <div aria-live="polite" aria-atomic="true" style="position: relative; min-height: 200px;">
 <div class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-autohide="false">
   <div class="toast-header">
     <strong class="mr-auto">Success!</strong>
     <small>Just now</small>
     <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
       <span aria-hidden="true">&times;</span>
     </button>
   </div>
   <div class="toast-body">
     Next, submit the payment method nonce to your server.
   </div>
 </div>
 </div>
 
   <!-- Load the required client component. -->
   <script src="https://js.braintreegateway.com/web/3.55.0/js/client.min.js"></script>
 
   <!-- Load Hosted Fields component. -->
   <script src="https://js.braintreegateway.com/web/3.55.0/js/hosted-fields.min.js"></script>
<script>
var form = $('form');

braintree.client.create({
  authorization: 'sandbox_tvb37t33_dwt5m34ppngz6s7k'
},
 function(err, clientInstance) {
  if (err) {
    console.error(err);
    return;
  }

  braintree.hostedFields.create({
    client: clientInstance,
    styles: {
      input: {
        // change input styles to match
        // bootstrap styles
        'font-size': '1rem',
        color: '#495057'
      }
    },
    fields: {
      number: {
        selector: '#cc-number',
        placeholder: '4111 1111 1111 1111'
      },
      cvv: {
        selector: '#cc-cvv',
        placeholder: '123'
      },
      expirationDate: {
        selector: '#cc-expiration',
        placeholder: 'MM / YY'
      }
    }
  }, function(err, hostedFieldsInstance) {
    if (err) {
      console.error(err);
      return;
    }
    function createInputChangeEventListener(element) {
      return function () {
        validateInput(element);
      }
    }

    function setValidityClasses(element, validity) {
      if (validity) {
        element.removeClass('is-invalid');
        element.addClass('is-valid');  
      } else {
        element.addClass('is-invalid');
        element.removeClass('is-valid');  
      }    
    }
    
    function validateInput(element) {
      // very basic validation, if the
      // fields are empty, mark them
      // as invalid, if not, mark them
      // as valid

      if (!element.val().trim()) {
        setValidityClasses(element, false);

        return false;
      }

      setValidityClasses(element, true);

      return true;
    }
    
    function validateEmail () {
      var baseValidity = validateInput(email);
      
      if (!baseValidity) {  
        return false;
      }

      if (email.val().indexOf('@') === -1) {
        setValidityClasses(email, false);
        return false;
      }
      
      setValidityClasses(email, true);
      return true;
    }

    var ccName = $('#cc-name');
    var email = $('#email');

    ccName.on('change', function () {
      validateInput(ccName);
    });
    email.on('change', validateEmail);


            hostedFieldsInstance.on('validityChange', function(event) {
      var field = event.fields[event.emittedBy];

      // Remove any previously applied error or warning classes
      $(field.container).removeClass('is-valid');
      $(field.container).removeClass('is-invalid');

      if (field.isValid) {
        $(field.container).addClass('is-valid');
      } else if (field.isPotentiallyValid) {
        // skip adding classes if the field is
        // not valid, but is potentially valid
      } else {
        $(field.container).addClass('is-invalid');
      }
    });

    hostedFieldsInstance.on('cardTypeChange', function(event) {
      var cardBrand = $('#card-brand');
      var cvvLabel = $('[for="cc-cvv"]');

      if (event.cards.length === 1) {
        var card = event.cards[0];

        // change pay button to specify the type of card
        // being used
        cardBrand.text(card.niceType);
        // update the security code label
        cvvLabel.text(card.code.name);
      } else {
        // reset to defaults
        cardBrand.text('Card');
        cvvLabel.text('CVV');
      }
    });

    form.submit(function(event) {
      event.preventDefault();

      var formIsInvalid = false;
      var state = hostedFieldsInstance.getState();

      // perform validations on the non-Hosted Fields
      // inputs
      if (!validateEmail() || !validateInput($('#cc-name'))) {
        formIsInvalid = true;
      }

      // Loop through the Hosted Fields and check
      // for validity, apply the is-invalid class
      // to the field container if invalid
      Object.keys(state.fields).forEach(function(field) {
        if (!state.fields[field].isValid) {
          $(state.fields[field].container).addClass('is-invalid');
          formIsInvalid = true;
        }
      });

      if (formIsInvalid) {
        // skip tokenization request if any fields are invalid
        return;
      }

      hostedFieldsInstance.tokenize({
        // include the cardholderName in the tokenization
        // request
        cardholderName: $('#cc-name').val()
      }, function(err, payload) {
        if (err) {
          console.error(err);
          return;
        }
        //$('#payment-method-nonce').val(payload.nonce);
        console.log(payload);
        var button = document.querySelector('#hosted-submit-button');
        button.addEventListener('click', function () {
        $.ajax({
              type: 'POST',
              url: '/payments/hosted',
              data: {'paymentMethodNonce': payload.nonce}
            }).done(function(result) {
              // Tear down the Drop-in UI
              hostedFieldsInstance.teardown(function (teardownErr) {
                if (teardownErr) {
                  console.error('Could not tear down Drop-in UI!');
                } else {
                  console.info('Drop-in UI has been torn down!');
                  // Remove the 'Submit payment' button
                  $('#hosted-submit-button').remove();
                }
              });
    
              if (result.success) {
              
                $('.toast').html('<h1>Success</h1><p>Your Drop-in UI is working! Check your <a href="https://sandbox.braintreegateway.com/login">sandbox Control Panel</a> for your test transactions.</p><p>Refresh to try another transaction.</p>');
                $('.toast').toast('show');
              } else {
                console.log(result);
                $('.toast').html('<h1>Error</h1><p>Check your console.</p>');
                $('.toast').toast('show');
              }
            });
          
          });
        // This is where you would submit payload.nonce to your server
       

        // you can either send the form values with the payment
        // method nonce via an ajax request to your server,
        // or add the payment method nonce to a hidden inpiut
        // on your form and submit the form programatically
         $('#payment-method-nonce').val(payload.nonce);
        // form.submit();
      });
    });
  });
});
</script>
<script>


// Create a client.
braintree.client.create({
  authorization: 'sandbox_tvb37t33_dwt5m34ppngz6s7k'
}).then(function (clientInstance) {
  // Create a PayPal Checkout component.
  return braintree.paypalCheckout.create({
    client: clientInstance
  });
}).then(function (paypalCheckoutInstance) {
  // Set up PayPal with the checkout.js library
  paypal.Button.render({
    env: 'sandbox', // Or 'sandbox'
    commit: true, // This will add the transaction amount to the PayPal button

    payment: function () {
      return paypalCheckoutInstance.createPayment({
        flow: 'checkout', // Required
        amount: 10.00, // Required
        currency: 'USD', // Required
        enableShippingAddress: true,
        shippingAddressEditable: false,
        shippingAddressOverride: {
          recipientName: 'Scruff McGruff',
          line1: '1234 Main St.',
          line2: 'Unit 1',
          city: 'Chicago',
          countryCode: 'US',
          postalCode: '60652',
          state: 'IL',
          phone: '123.456.7890'
        }
      });
    },

    onAuthorize: function (data, actions) {
      return paypalCheckoutInstance.tokenizePayment(data)
        .then(function (payload) {
          $.ajax({
              type: 'POST',
              url: '/payments/paypal',
              data: {'paymentMethodNonce': payload.nonce}
            }).done(function(result) {
              // Tear down the Drop-in UI
              hostedFieldsInstance.teardown(function (teardownErr) {
                if (teardownErr) {
                  console.error('Could not tear down Drop-in UI!');
                } else {
                  console.info('Drop-in UI has been torn down!');
                  // Remove the 'Submit payment' button
                  $('#hosted-submit-button').remove();
                }
              });
    
              if (result.success) {
              
                $('.toast').html('<h1>Success</h1><p>Your Drop-in UI is working! Check your <a href="https://sandbox.braintreegateway.com/login">sandbox Control Panel</a> for your test transactions.</p><p>Refresh to try another transaction.</p>');
                $('.toast').toast('show');
              } else {
                console.log(result);
                $('.toast').html('<h1>Error</h1><p>Check your console.</p>');
                $('.toast').toast('show');
              }
            });
        });
    },

    onCancel: function (data) {
      console.log('checkout.js payment cancelled', JSON.stringify(data, 0, 2));
    },

    onError: function (err) {
      console.error('checkout.js error', err);
    }
  }, '#paypal-button');
}).then(function () {
  // The PayPal button will be rendered in an html element with the id
  // `paypal-button`. This function will be called when the PayPal button
  // is set up and ready to be used.
}).catch(function (err) {
  // Handle component creation error
});
</script>




<!--dropin Example-->
 <div id="dropin-wrapper">
   <div id="checkout-message"></div>
   <div id="dropin-container"></div>
   <button id="submit-button">Submit payment</button>
 </div>
<!--dropin Script Example-->
 